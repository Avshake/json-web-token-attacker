/**
 * JOSEPH - JavaScript Object Signing and Encryption Pentesting Helper
 * Copyright (C) 2016 Dennis Detering
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package eu.dety.burp.joseph.gui;


import burp.*;

import eu.dety.burp.joseph.utilities.Decoder;
import eu.dety.burp.joseph.utilities.Finder;
import eu.dety.burp.joseph.utilities.Logger;
import org.json.JSONObject;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;

/**
 * Attacker tab showing a single message and related attacks
 * @author Dennis Detering
 * @version 1.0
 */
public class UIAttackerTab extends JPanel {
    private static final Logger loggerInstance = Logger.getInstance();
    private static final Finder finder = new Finder();
    private DefaultComboBoxModel<String> attackListModel = new DefaultComboBoxModel<>();
    private final IExtensionHelpers helpers;

    private IHttpRequestResponse request;
    private IRequestInfo requestInfo;
    private IParameter parameter = null;
    private String type = "?";
    private String algorithm = "?";


    // TODO: Make closable
    public UIAttackerTab(IBurpExtenderCallbacks callbacks, IHttpRequestResponse message) {
        Decoder joseDecoder = new Decoder(callbacks);
        this.helpers = callbacks.getHelpers();
        this.request = message;
        this.requestInfo = helpers.analyzeRequest(message);

        // Find the JOSE parameter
        for (IParameter param : requestInfo.getParameters()) {
            if(UIPreferences.getParameterNames().contains(param.getName())) {
                if (finder.checkJWTPattern(param.getValue())) {
                    parameter = param;
                    break;
                }
            }
        }

        // Initialize UI components
        initComponents();

        // Parse the JOSE value to an JSONObject
        JSONObject paramJSON = joseDecoder.getDecodedJSON(parameter.getValue());

        // If the keys "alg" and "typ" exist, get their value and update informational fields
        if(paramJSON.has("alg")) algorithm = paramJSON.getString("alg");
        if(paramJSON.has("typ")) type = paramJSON.getString("typ");
        typeValue.setText(type);
        algorithmValue.setText(algorithm);

        loggerInstance.log(getClass(), "JOSE Parameter Name: " + parameter.getName(), Logger.DEBUG);
        loggerInstance.log(getClass(), "JOSE Parameter Value (JSON Parsed) " + paramJSON.toString(), Logger.DEBUG);

        // Build available attacks list
        attackListModel.addElement( "Signature Exclusion");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeLabel = new javax.swing.JLabel();
        attackListLabel = new javax.swing.JLabel();
        attackList = new javax.swing.JComboBox<>();
        attackButton = new javax.swing.JButton();
        algorithmLabel = new javax.swing.JLabel();
        typeValue = new javax.swing.JLabel();
        algorithmValue = new javax.swing.JLabel();

        typeLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        typeLabel.setText("Type:");

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("JOSEPH"); // NOI18N
        attackListLabel.setText(bundle.getString("ATTACKLISTLABEL")); // NOI18N

        attackList.setModel(attackListModel);

        attackButton.setText(bundle.getString("LOADBUTTON")); // NOI18N
        attackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackButtonActionPerformed(evt);
            }
        });

        algorithmLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        algorithmLabel.setText("Algorithm:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(typeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(algorithmLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algorithmValue))
                    .addComponent(attackListLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(attackList, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attackButton)))
                .addContainerGap(261, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(algorithmLabel)
                    .addComponent(typeValue)
                    .addComponent(algorithmValue))
                .addGap(18, 18, 18)
                .addComponent(attackListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attackList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attackButton))
                .addContainerGap(206, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void attackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackButtonActionPerformed
        loggerInstance.log(getClass(), "Load button clicked", Logger.DEBUG);
    }//GEN-LAST:event_attackButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel algorithmLabel;
    private javax.swing.JLabel algorithmValue;
    private javax.swing.JButton attackButton;
    private javax.swing.JComboBox<String> attackList;
    private javax.swing.JLabel attackListLabel;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel typeValue;
    // End of variables declaration//GEN-END:variables
}
